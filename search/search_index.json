{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"LinkML Data Transformer Model Datamodel for LinkML schema transformations URI: https://w3id.org/linkml/transformer Name: transformer Classes Class Description AliasedClass alias-class key value pairs for classes ClassDerivation None Inverse None SlotDerivation None TransformationSpecification A collection of mappings between source and target classes Slots Slot Description alias None class_derivations Instructions on how to derive a set of class in the target schema class_name None class_named local alias for the class expr None hide None id None inverse_of None joins Additional classes to be joined to derive instances of the target class name Name of the class in the target schema populated_from Name of the class in the source schema prefixes None slot_derivations None slot_name None source_schema None target_schema None title None type_designator None Enumerations Enumeration Description Subsets Subset Description","title":"Index"},{"location":"#linkml-data-transformer-model","text":"Datamodel for LinkML schema transformations URI: https://w3id.org/linkml/transformer Name: transformer","title":"LinkML Data Transformer Model"},{"location":"#classes","text":"Class Description AliasedClass alias-class key value pairs for classes ClassDerivation None Inverse None SlotDerivation None TransformationSpecification A collection of mappings between source and target classes","title":"Classes"},{"location":"#slots","text":"Slot Description alias None class_derivations Instructions on how to derive a set of class in the target schema class_name None class_named local alias for the class expr None hide None id None inverse_of None joins Additional classes to be joined to derive instances of the target class name Name of the class in the target schema populated_from Name of the class in the source schema prefixes None slot_derivations None slot_name None source_schema None target_schema None title None type_designator None","title":"Slots"},{"location":"#enumerations","text":"Enumeration Description","title":"Enumerations"},{"location":"#subsets","text":"Subset Description","title":"Subsets"},{"location":"AliasedClass/","text":"Class: AliasedClass alias-class key value pairs for classes URI: tr:AliasedClass classDiagram class AliasedClass AliasedClass : alias AliasedClass : class_named Slots Name Range Cardinality Description Info alias NONE 0..1 None . class_named NONE 0..1 local alias for the class . Usages used by used in type used ClassDerivation joins range AliasedClass Identifier and Mapping Information Schema Source from schema: https://w3id.org/linkml/transformer Mappings Mapping Type Mapped Value self ['tr:AliasedClass'] native ['tr:AliasedClass'] LinkML Specification Direct name: AliasedClass description: alias-class key value pairs for classes from_schema: https://w3id.org/linkml/transformer attributes: alias: name: alias from_schema: https://w3id.org/linkml/transformer key: true class_named: name: class_named description: local alias for the class from_schema: https://w3id.org/linkml/transformer Induced name: AliasedClass description: alias-class key value pairs for classes from_schema: https://w3id.org/linkml/transformer attributes: alias: name: alias from_schema: https://w3id.org/linkml/transformer key: true alias: alias owner: AliasedClass class_named: name: class_named description: local alias for the class from_schema: https://w3id.org/linkml/transformer alias: class_named owner: AliasedClass","title":"Class: AliasedClass"},{"location":"AliasedClass/#class-aliasedclass","text":"alias-class key value pairs for classes URI: tr:AliasedClass classDiagram class AliasedClass AliasedClass : alias AliasedClass : class_named","title":"Class: AliasedClass"},{"location":"AliasedClass/#slots","text":"Name Range Cardinality Description Info alias NONE 0..1 None . class_named NONE 0..1 local alias for the class .","title":"Slots"},{"location":"AliasedClass/#usages","text":"used by used in type used ClassDerivation joins range AliasedClass","title":"Usages"},{"location":"AliasedClass/#identifier-and-mapping-information","text":"","title":"Identifier and Mapping Information"},{"location":"AliasedClass/#schema-source","text":"from schema: https://w3id.org/linkml/transformer","title":"Schema Source"},{"location":"AliasedClass/#mappings","text":"Mapping Type Mapped Value self ['tr:AliasedClass'] native ['tr:AliasedClass']","title":"Mappings"},{"location":"AliasedClass/#linkml-specification","text":"","title":"LinkML Specification"},{"location":"AliasedClass/#direct","text":"name: AliasedClass description: alias-class key value pairs for classes from_schema: https://w3id.org/linkml/transformer attributes: alias: name: alias from_schema: https://w3id.org/linkml/transformer key: true class_named: name: class_named description: local alias for the class from_schema: https://w3id.org/linkml/transformer","title":"Direct"},{"location":"AliasedClass/#induced","text":"name: AliasedClass description: alias-class key value pairs for classes from_schema: https://w3id.org/linkml/transformer attributes: alias: name: alias from_schema: https://w3id.org/linkml/transformer key: true alias: alias owner: AliasedClass class_named: name: class_named description: local alias for the class from_schema: https://w3id.org/linkml/transformer alias: class_named owner: AliasedClass","title":"Induced"},{"location":"ClassDerivation/","text":"Class: ClassDerivation URI: tr:ClassDerivation classDiagram class ClassDerivation ClassDerivation : joins ClassDerivation : name ClassDerivation : populated_from ClassDerivation : slot_derivations Slots Name Range Cardinality Description Info name NONE 0..1 Name of the class in the target schema . populated_from xsd:string 0..1 Name of the class in the source schema . joins AliasedClass 0..* Additional classes to be joined to derive instances of the target class . slot_derivations SlotDerivation 0..* None . Usages used by used in type used TransformationSpecification class_derivations range ClassDerivation Identifier and Mapping Information Schema Source from schema: https://w3id.org/linkml/transformer Mappings Mapping Type Mapped Value self ['tr:ClassDerivation'] native ['tr:ClassDerivation'] LinkML Specification Direct name: ClassDerivation from_schema: https://w3id.org/linkml/transformer attributes: name: name: name description: Name of the class in the target schema from_schema: https://w3id.org/linkml/transformer key: true populated_from: name: populated_from description: Name of the class in the source schema from_schema: https://w3id.org/linkml/transformer range: string joins: name: joins description: Additional classes to be joined to derive instances of the target class from_schema: https://w3id.org/linkml/transformer multivalued: true range: AliasedClass inlined: true slot_derivations: name: slot_derivations from_schema: https://w3id.org/linkml/transformer multivalued: true range: SlotDerivation inlined: true Induced name: ClassDerivation from_schema: https://w3id.org/linkml/transformer attributes: name: name: name description: Name of the class in the target schema from_schema: https://w3id.org/linkml/transformer key: true alias: name owner: ClassDerivation populated_from: name: populated_from description: Name of the class in the source schema from_schema: https://w3id.org/linkml/transformer alias: populated_from owner: ClassDerivation range: string joins: name: joins description: Additional classes to be joined to derive instances of the target class from_schema: https://w3id.org/linkml/transformer multivalued: true alias: joins owner: ClassDerivation range: AliasedClass inlined: true slot_derivations: name: slot_derivations from_schema: https://w3id.org/linkml/transformer multivalued: true alias: slot_derivations owner: ClassDerivation range: SlotDerivation inlined: true","title":"Class: ClassDerivation"},{"location":"ClassDerivation/#class-classderivation","text":"URI: tr:ClassDerivation classDiagram class ClassDerivation ClassDerivation : joins ClassDerivation : name ClassDerivation : populated_from ClassDerivation : slot_derivations","title":"Class: ClassDerivation"},{"location":"ClassDerivation/#slots","text":"Name Range Cardinality Description Info name NONE 0..1 Name of the class in the target schema . populated_from xsd:string 0..1 Name of the class in the source schema . joins AliasedClass 0..* Additional classes to be joined to derive instances of the target class . slot_derivations SlotDerivation 0..* None .","title":"Slots"},{"location":"ClassDerivation/#usages","text":"used by used in type used TransformationSpecification class_derivations range ClassDerivation","title":"Usages"},{"location":"ClassDerivation/#identifier-and-mapping-information","text":"","title":"Identifier and Mapping Information"},{"location":"ClassDerivation/#schema-source","text":"from schema: https://w3id.org/linkml/transformer","title":"Schema Source"},{"location":"ClassDerivation/#mappings","text":"Mapping Type Mapped Value self ['tr:ClassDerivation'] native ['tr:ClassDerivation']","title":"Mappings"},{"location":"ClassDerivation/#linkml-specification","text":"","title":"LinkML Specification"},{"location":"ClassDerivation/#direct","text":"name: ClassDerivation from_schema: https://w3id.org/linkml/transformer attributes: name: name: name description: Name of the class in the target schema from_schema: https://w3id.org/linkml/transformer key: true populated_from: name: populated_from description: Name of the class in the source schema from_schema: https://w3id.org/linkml/transformer range: string joins: name: joins description: Additional classes to be joined to derive instances of the target class from_schema: https://w3id.org/linkml/transformer multivalued: true range: AliasedClass inlined: true slot_derivations: name: slot_derivations from_schema: https://w3id.org/linkml/transformer multivalued: true range: SlotDerivation inlined: true","title":"Direct"},{"location":"ClassDerivation/#induced","text":"name: ClassDerivation from_schema: https://w3id.org/linkml/transformer attributes: name: name: name description: Name of the class in the target schema from_schema: https://w3id.org/linkml/transformer key: true alias: name owner: ClassDerivation populated_from: name: populated_from description: Name of the class in the source schema from_schema: https://w3id.org/linkml/transformer alias: populated_from owner: ClassDerivation range: string joins: name: joins description: Additional classes to be joined to derive instances of the target class from_schema: https://w3id.org/linkml/transformer multivalued: true alias: joins owner: ClassDerivation range: AliasedClass inlined: true slot_derivations: name: slot_derivations from_schema: https://w3id.org/linkml/transformer multivalued: true alias: slot_derivations owner: ClassDerivation range: SlotDerivation inlined: true","title":"Induced"},{"location":"Inverse/","text":"Class: Inverse URI: tr:Inverse classDiagram class Inverse Inverse : class_name Inverse : slot_name Slots Name Range Cardinality Description Info slot_name NONE 0..1 None . class_name NONE 0..1 None . Usages used by used in type used SlotDerivation inverse_of range Inverse Identifier and Mapping Information Schema Source from schema: https://w3id.org/linkml/transformer Mappings Mapping Type Mapped Value self ['tr:Inverse'] native ['tr:Inverse'] LinkML Specification Direct name: Inverse from_schema: https://w3id.org/linkml/transformer aliases: - backref - back references attributes: slot_name: name: slot_name from_schema: https://w3id.org/linkml/transformer class_name: name: class_name from_schema: https://w3id.org/linkml/transformer Induced name: Inverse from_schema: https://w3id.org/linkml/transformer aliases: - backref - back references attributes: slot_name: name: slot_name from_schema: https://w3id.org/linkml/transformer alias: slot_name owner: Inverse class_name: name: class_name from_schema: https://w3id.org/linkml/transformer alias: class_name owner: Inverse","title":"Class: Inverse"},{"location":"Inverse/#class-inverse","text":"URI: tr:Inverse classDiagram class Inverse Inverse : class_name Inverse : slot_name","title":"Class: Inverse"},{"location":"Inverse/#slots","text":"Name Range Cardinality Description Info slot_name NONE 0..1 None . class_name NONE 0..1 None .","title":"Slots"},{"location":"Inverse/#usages","text":"used by used in type used SlotDerivation inverse_of range Inverse","title":"Usages"},{"location":"Inverse/#identifier-and-mapping-information","text":"","title":"Identifier and Mapping Information"},{"location":"Inverse/#schema-source","text":"from schema: https://w3id.org/linkml/transformer","title":"Schema Source"},{"location":"Inverse/#mappings","text":"Mapping Type Mapped Value self ['tr:Inverse'] native ['tr:Inverse']","title":"Mappings"},{"location":"Inverse/#linkml-specification","text":"","title":"LinkML Specification"},{"location":"Inverse/#direct","text":"name: Inverse from_schema: https://w3id.org/linkml/transformer aliases: - backref - back references attributes: slot_name: name: slot_name from_schema: https://w3id.org/linkml/transformer class_name: name: class_name from_schema: https://w3id.org/linkml/transformer","title":"Direct"},{"location":"Inverse/#induced","text":"name: Inverse from_schema: https://w3id.org/linkml/transformer aliases: - backref - back references attributes: slot_name: name: slot_name from_schema: https://w3id.org/linkml/transformer alias: slot_name owner: Inverse class_name: name: class_name from_schema: https://w3id.org/linkml/transformer alias: class_name owner: Inverse","title":"Induced"},{"location":"SlotDerivation/","text":"Class: SlotDerivation URI: tr:SlotDerivation classDiagram class SlotDerivation SlotDerivation : expr SlotDerivation : hide SlotDerivation : inverse_of SlotDerivation : name SlotDerivation : populated_from SlotDerivation : type_designator Slots Name Range Cardinality Description Info name NONE 0..1 None . populated_from xsd:string 0..1 None . expr xsd:string 0..1 None . inverse_of Inverse 0..1 None . hide xsd:boolean 0..1 None . type_designator xsd:boolean 0..1 None . Usages used by used in type used ClassDerivation slot_derivations range SlotDerivation Identifier and Mapping Information Schema Source from schema: https://w3id.org/linkml/transformer Mappings Mapping Type Mapped Value self ['tr:SlotDerivation'] native ['tr:SlotDerivation'] LinkML Specification Direct name: SlotDerivation from_schema: https://w3id.org/linkml/transformer attributes: name: name: name from_schema: https://w3id.org/linkml/transformer key: true populated_from: name: populated_from from_schema: https://w3id.org/linkml/transformer range: string expr: name: expr from_schema: https://w3id.org/linkml/transformer range: string inverse_of: name: inverse_of from_schema: https://w3id.org/linkml/transformer range: Inverse hide: name: hide from_schema: https://w3id.org/linkml/transformer range: boolean type_designator: name: type_designator from_schema: https://w3id.org/linkml/transformer range: boolean Induced name: SlotDerivation from_schema: https://w3id.org/linkml/transformer attributes: name: name: name from_schema: https://w3id.org/linkml/transformer key: true alias: name owner: SlotDerivation populated_from: name: populated_from from_schema: https://w3id.org/linkml/transformer alias: populated_from owner: SlotDerivation range: string expr: name: expr from_schema: https://w3id.org/linkml/transformer alias: expr owner: SlotDerivation range: string inverse_of: name: inverse_of from_schema: https://w3id.org/linkml/transformer alias: inverse_of owner: SlotDerivation range: Inverse hide: name: hide from_schema: https://w3id.org/linkml/transformer alias: hide owner: SlotDerivation range: boolean type_designator: name: type_designator from_schema: https://w3id.org/linkml/transformer alias: type_designator owner: SlotDerivation range: boolean","title":"Class: SlotDerivation"},{"location":"SlotDerivation/#class-slotderivation","text":"URI: tr:SlotDerivation classDiagram class SlotDerivation SlotDerivation : expr SlotDerivation : hide SlotDerivation : inverse_of SlotDerivation : name SlotDerivation : populated_from SlotDerivation : type_designator","title":"Class: SlotDerivation"},{"location":"SlotDerivation/#slots","text":"Name Range Cardinality Description Info name NONE 0..1 None . populated_from xsd:string 0..1 None . expr xsd:string 0..1 None . inverse_of Inverse 0..1 None . hide xsd:boolean 0..1 None . type_designator xsd:boolean 0..1 None .","title":"Slots"},{"location":"SlotDerivation/#usages","text":"used by used in type used ClassDerivation slot_derivations range SlotDerivation","title":"Usages"},{"location":"SlotDerivation/#identifier-and-mapping-information","text":"","title":"Identifier and Mapping Information"},{"location":"SlotDerivation/#schema-source","text":"from schema: https://w3id.org/linkml/transformer","title":"Schema Source"},{"location":"SlotDerivation/#mappings","text":"Mapping Type Mapped Value self ['tr:SlotDerivation'] native ['tr:SlotDerivation']","title":"Mappings"},{"location":"SlotDerivation/#linkml-specification","text":"","title":"LinkML Specification"},{"location":"SlotDerivation/#direct","text":"name: SlotDerivation from_schema: https://w3id.org/linkml/transformer attributes: name: name: name from_schema: https://w3id.org/linkml/transformer key: true populated_from: name: populated_from from_schema: https://w3id.org/linkml/transformer range: string expr: name: expr from_schema: https://w3id.org/linkml/transformer range: string inverse_of: name: inverse_of from_schema: https://w3id.org/linkml/transformer range: Inverse hide: name: hide from_schema: https://w3id.org/linkml/transformer range: boolean type_designator: name: type_designator from_schema: https://w3id.org/linkml/transformer range: boolean","title":"Direct"},{"location":"SlotDerivation/#induced","text":"name: SlotDerivation from_schema: https://w3id.org/linkml/transformer attributes: name: name: name from_schema: https://w3id.org/linkml/transformer key: true alias: name owner: SlotDerivation populated_from: name: populated_from from_schema: https://w3id.org/linkml/transformer alias: populated_from owner: SlotDerivation range: string expr: name: expr from_schema: https://w3id.org/linkml/transformer alias: expr owner: SlotDerivation range: string inverse_of: name: inverse_of from_schema: https://w3id.org/linkml/transformer alias: inverse_of owner: SlotDerivation range: Inverse hide: name: hide from_schema: https://w3id.org/linkml/transformer alias: hide owner: SlotDerivation range: boolean type_designator: name: type_designator from_schema: https://w3id.org/linkml/transformer alias: type_designator owner: SlotDerivation range: boolean","title":"Induced"},{"location":"TransformationSpecification/","text":"Class: TransformationSpecification A collection of mappings between source and target classes URI: tr:TransformationSpecification classDiagram class TransformationSpecification TransformationSpecification : class_derivations TransformationSpecification : id TransformationSpecification : prefixes TransformationSpecification : source_schema TransformationSpecification : target_schema TransformationSpecification : title Slots Name Range Cardinality Description Info id NONE 0..1 None . title NONE 0..1 None . prefixes NONE 0..1 None . source_schema NONE 0..1 None . target_schema NONE 0..1 None . class_derivations ClassDerivation 0..* Instructions on how to derive a set of class in the target schema . Usages Identifier and Mapping Information Schema Source from schema: https://w3id.org/linkml/transformer Mappings Mapping Type Mapped Value self ['tr:TransformationSpecification'] native ['tr:TransformationSpecification'] LinkML Specification Direct name: TransformationSpecification description: A collection of mappings between source and target classes from_schema: https://w3id.org/linkml/transformer attributes: id: name: id from_schema: https://w3id.org/linkml/transformer title: name: title from_schema: https://w3id.org/linkml/transformer prefixes: name: prefixes from_schema: https://w3id.org/linkml/transformer source_schema: name: source_schema from_schema: https://w3id.org/linkml/transformer target_schema: name: target_schema from_schema: https://w3id.org/linkml/transformer class_derivations: name: class_derivations description: Instructions on how to derive a set of class in the target schema from_schema: https://w3id.org/linkml/transformer multivalued: true range: ClassDerivation inlined: true tree_root: true Induced name: TransformationSpecification description: A collection of mappings between source and target classes from_schema: https://w3id.org/linkml/transformer attributes: id: name: id from_schema: https://w3id.org/linkml/transformer alias: id owner: TransformationSpecification title: name: title from_schema: https://w3id.org/linkml/transformer alias: title owner: TransformationSpecification prefixes: name: prefixes from_schema: https://w3id.org/linkml/transformer alias: prefixes owner: TransformationSpecification source_schema: name: source_schema from_schema: https://w3id.org/linkml/transformer alias: source_schema owner: TransformationSpecification target_schema: name: target_schema from_schema: https://w3id.org/linkml/transformer alias: target_schema owner: TransformationSpecification class_derivations: name: class_derivations description: Instructions on how to derive a set of class in the target schema from_schema: https://w3id.org/linkml/transformer multivalued: true alias: class_derivations owner: TransformationSpecification range: ClassDerivation inlined: true tree_root: true","title":"Class: TransformationSpecification"},{"location":"TransformationSpecification/#class-transformationspecification","text":"A collection of mappings between source and target classes URI: tr:TransformationSpecification classDiagram class TransformationSpecification TransformationSpecification : class_derivations TransformationSpecification : id TransformationSpecification : prefixes TransformationSpecification : source_schema TransformationSpecification : target_schema TransformationSpecification : title","title":"Class: TransformationSpecification"},{"location":"TransformationSpecification/#slots","text":"Name Range Cardinality Description Info id NONE 0..1 None . title NONE 0..1 None . prefixes NONE 0..1 None . source_schema NONE 0..1 None . target_schema NONE 0..1 None . class_derivations ClassDerivation 0..* Instructions on how to derive a set of class in the target schema .","title":"Slots"},{"location":"TransformationSpecification/#usages","text":"","title":"Usages"},{"location":"TransformationSpecification/#identifier-and-mapping-information","text":"","title":"Identifier and Mapping Information"},{"location":"TransformationSpecification/#schema-source","text":"from schema: https://w3id.org/linkml/transformer","title":"Schema Source"},{"location":"TransformationSpecification/#mappings","text":"Mapping Type Mapped Value self ['tr:TransformationSpecification'] native ['tr:TransformationSpecification']","title":"Mappings"},{"location":"TransformationSpecification/#linkml-specification","text":"","title":"LinkML Specification"},{"location":"TransformationSpecification/#direct","text":"name: TransformationSpecification description: A collection of mappings between source and target classes from_schema: https://w3id.org/linkml/transformer attributes: id: name: id from_schema: https://w3id.org/linkml/transformer title: name: title from_schema: https://w3id.org/linkml/transformer prefixes: name: prefixes from_schema: https://w3id.org/linkml/transformer source_schema: name: source_schema from_schema: https://w3id.org/linkml/transformer target_schema: name: target_schema from_schema: https://w3id.org/linkml/transformer class_derivations: name: class_derivations description: Instructions on how to derive a set of class in the target schema from_schema: https://w3id.org/linkml/transformer multivalued: true range: ClassDerivation inlined: true tree_root: true","title":"Direct"},{"location":"TransformationSpecification/#induced","text":"name: TransformationSpecification description: A collection of mappings between source and target classes from_schema: https://w3id.org/linkml/transformer attributes: id: name: id from_schema: https://w3id.org/linkml/transformer alias: id owner: TransformationSpecification title: name: title from_schema: https://w3id.org/linkml/transformer alias: title owner: TransformationSpecification prefixes: name: prefixes from_schema: https://w3id.org/linkml/transformer alias: prefixes owner: TransformationSpecification source_schema: name: source_schema from_schema: https://w3id.org/linkml/transformer alias: source_schema owner: TransformationSpecification target_schema: name: target_schema from_schema: https://w3id.org/linkml/transformer alias: target_schema owner: TransformationSpecification class_derivations: name: class_derivations description: Instructions on how to derive a set of class in the target schema from_schema: https://w3id.org/linkml/transformer multivalued: true alias: class_derivations owner: TransformationSpecification range: ClassDerivation inlined: true tree_root: true","title":"Induced"},{"location":"alias/","text":"Slot: alias URI: https://w3id.org/linkml/transformer/alias Properties Range: NONE Identifier and Mapping Information Schema Source from schema: https://w3id.org/linkml/transformer","title":"Slot: alias"},{"location":"alias/#slot-alias","text":"URI: https://w3id.org/linkml/transformer/alias","title":"Slot: alias"},{"location":"alias/#properties","text":"Range: NONE","title":"Properties"},{"location":"alias/#identifier-and-mapping-information","text":"","title":"Identifier and Mapping Information"},{"location":"alias/#schema-source","text":"from schema: https://w3id.org/linkml/transformer","title":"Schema Source"},{"location":"class_derivations/","text":"Slot: class_derivations Instructions on how to derive a set of class in the target schema URI: https://w3id.org/linkml/transformer/class_derivations Properties Range: ClassDerivation Identifier and Mapping Information Schema Source from schema: https://w3id.org/linkml/transformer","title":"Slot: class_derivations"},{"location":"class_derivations/#slot-class_derivations","text":"Instructions on how to derive a set of class in the target schema URI: https://w3id.org/linkml/transformer/class_derivations","title":"Slot: class_derivations"},{"location":"class_derivations/#properties","text":"Range: ClassDerivation","title":"Properties"},{"location":"class_derivations/#identifier-and-mapping-information","text":"","title":"Identifier and Mapping Information"},{"location":"class_derivations/#schema-source","text":"from schema: https://w3id.org/linkml/transformer","title":"Schema Source"},{"location":"class_name/","text":"Slot: class_name URI: https://w3id.org/linkml/transformer/class_name Properties Range: NONE Identifier and Mapping Information Schema Source from schema: https://w3id.org/linkml/transformer","title":"Slot: class_name"},{"location":"class_name/#slot-class_name","text":"URI: https://w3id.org/linkml/transformer/class_name","title":"Slot: class_name"},{"location":"class_name/#properties","text":"Range: NONE","title":"Properties"},{"location":"class_name/#identifier-and-mapping-information","text":"","title":"Identifier and Mapping Information"},{"location":"class_name/#schema-source","text":"from schema: https://w3id.org/linkml/transformer","title":"Schema Source"},{"location":"class_named/","text":"Slot: class_named local alias for the class URI: https://w3id.org/linkml/transformer/class_named Properties Range: NONE Identifier and Mapping Information Schema Source from schema: https://w3id.org/linkml/transformer","title":"Slot: class_named"},{"location":"class_named/#slot-class_named","text":"local alias for the class URI: https://w3id.org/linkml/transformer/class_named","title":"Slot: class_named"},{"location":"class_named/#properties","text":"Range: NONE","title":"Properties"},{"location":"class_named/#identifier-and-mapping-information","text":"","title":"Identifier and Mapping Information"},{"location":"class_named/#schema-source","text":"from schema: https://w3id.org/linkml/transformer","title":"Schema Source"},{"location":"expr/","text":"Slot: expr URI: https://w3id.org/linkml/transformer/expr Properties Range: xsd:string Identifier and Mapping Information Schema Source from schema: https://w3id.org/linkml/transformer","title":"Slot: expr"},{"location":"expr/#slot-expr","text":"URI: https://w3id.org/linkml/transformer/expr","title":"Slot: expr"},{"location":"expr/#properties","text":"Range: xsd:string","title":"Properties"},{"location":"expr/#identifier-and-mapping-information","text":"","title":"Identifier and Mapping Information"},{"location":"expr/#schema-source","text":"from schema: https://w3id.org/linkml/transformer","title":"Schema Source"},{"location":"hide/","text":"Slot: hide URI: https://w3id.org/linkml/transformer/hide Properties Range: xsd:boolean Identifier and Mapping Information Schema Source from schema: https://w3id.org/linkml/transformer","title":"Slot: hide"},{"location":"hide/#slot-hide","text":"URI: https://w3id.org/linkml/transformer/hide","title":"Slot: hide"},{"location":"hide/#properties","text":"Range: xsd:boolean","title":"Properties"},{"location":"hide/#identifier-and-mapping-information","text":"","title":"Identifier and Mapping Information"},{"location":"hide/#schema-source","text":"from schema: https://w3id.org/linkml/transformer","title":"Schema Source"},{"location":"id/","text":"Slot: id URI: https://w3id.org/linkml/transformer/id Properties Range: NONE Identifier and Mapping Information Schema Source from schema: https://w3id.org/linkml/transformer","title":"Slot: id"},{"location":"id/#slot-id","text":"URI: https://w3id.org/linkml/transformer/id","title":"Slot: id"},{"location":"id/#properties","text":"Range: NONE","title":"Properties"},{"location":"id/#identifier-and-mapping-information","text":"","title":"Identifier and Mapping Information"},{"location":"id/#schema-source","text":"from schema: https://w3id.org/linkml/transformer","title":"Schema Source"},{"location":"inverse_of/","text":"Slot: inverse_of URI: https://w3id.org/linkml/transformer/inverse_of Properties Range: Inverse Identifier and Mapping Information Schema Source from schema: https://w3id.org/linkml/transformer","title":"Slot: inverse_of"},{"location":"inverse_of/#slot-inverse_of","text":"URI: https://w3id.org/linkml/transformer/inverse_of","title":"Slot: inverse_of"},{"location":"inverse_of/#properties","text":"Range: Inverse","title":"Properties"},{"location":"inverse_of/#identifier-and-mapping-information","text":"","title":"Identifier and Mapping Information"},{"location":"inverse_of/#schema-source","text":"from schema: https://w3id.org/linkml/transformer","title":"Schema Source"},{"location":"joins/","text":"Slot: joins Additional classes to be joined to derive instances of the target class URI: https://w3id.org/linkml/transformer/joins Properties Range: AliasedClass Identifier and Mapping Information Schema Source from schema: https://w3id.org/linkml/transformer","title":"Slot: joins"},{"location":"joins/#slot-joins","text":"Additional classes to be joined to derive instances of the target class URI: https://w3id.org/linkml/transformer/joins","title":"Slot: joins"},{"location":"joins/#properties","text":"Range: AliasedClass","title":"Properties"},{"location":"joins/#identifier-and-mapping-information","text":"","title":"Identifier and Mapping Information"},{"location":"joins/#schema-source","text":"from schema: https://w3id.org/linkml/transformer","title":"Schema Source"},{"location":"name/","text":"Slot: name Name of the class in the target schema URI: https://w3id.org/linkml/transformer/name Properties Range: NONE Identifier and Mapping Information Schema Source from schema: https://w3id.org/linkml/transformer","title":"Slot: name"},{"location":"name/#slot-name","text":"Name of the class in the target schema URI: https://w3id.org/linkml/transformer/name","title":"Slot: name"},{"location":"name/#properties","text":"Range: NONE","title":"Properties"},{"location":"name/#identifier-and-mapping-information","text":"","title":"Identifier and Mapping Information"},{"location":"name/#schema-source","text":"from schema: https://w3id.org/linkml/transformer","title":"Schema Source"},{"location":"overview/","text":"Mapping Between LinkML Schemas Draft 2022-06-24 Problem: map data from one schema to another Problem: Map d1 \u2192 d2 Assumption d1 and d2 conform to two separate schemas\\, s1\u2192 s2 Sub-problems: Ingest/Import: my data warehouse conforms to s2 (e.g. Monarch ingest) Export: make my data ingest friendly Migrations: s1 and s2 are different versions of the same schema Not in scope: in-schema syntactic or structural transforms JSON to YAML\\, JSON to TSV\\, JSON to SQL\\, JSON to RDF\\, ORM\\, \u2026 In LinkML this is already largely solved The actual problem space is highly varied S1 and S2 may be trivially isomorphic S1 and S2 may differ in complex or nuanced ways There are many existing approaches Generic frameworks\\, driven by declarative specification in Domain Specific Language (DSL) JSON-based Google whistle jsonpath-lift XSLT Semweb YARRML\\, R2RML Many many more\u2026 Bespoke transforms: non-declarative Implement in python/awk/etc. Hybrid: bespoke with some declarative mappings in ad-hoc format E.g. NMDC ingest framework Traps with declarative mapping Declarative is great\\, until it\u2019s not Anti-patterns: Insufficient expressivity to carry out real world tasks Bolting on features to mapping DSL until it\u2019s a fully-featured Turing-complete language Optimization/scalability at mercy of framework Messy layering between DSL and host language It can be useful to leverage host language features (e.g arbitrary python function) But this can get confusing: NFNF: Neither fish nor fowl Limits optimizations (forces iterative host language calls) YARRRML https://rml.io/yarrrml/ YARRRML notes Has a playground\\, which is great Mixes two concerns: 1. Isomorphic structural mapping between JSON/TSVs and RDF (already covered by JSON-LD) 2. Mapping This isn\u2019t necessarily bad - it\u2019s quite practical\\, but a little unsatisfying IMO jsonpath-lifter Was proposed for CCDH CRDC-node mappings Doesn\u2019t seem widely used Is there a big advantage over simply writing javascript functions? Koza (previously: bioweave) ETL frameworks There are many many ETL frameworks E.g. WebKarma Inherently mixing of concerns Here we are concerned with the \u201cT\u201d part Do existing frameworks separate out the T as a modular composable component? I\u2019m not sure Do we need Yet Another Mapping Framework? LinkML philosophy: Embrace\\, extend\\, parasitize Develop lightweight ways to map Map mappings to existing mapping frameworks This actually makes sense even if it sounds kind of meta\u2026 Level 0 Mapping: Isomorphic, same URIs classes: Person: class_uri: sdo:Person attributes: family_name: slot_uri: sdo:familyName address: slot_uri: sdo:address classes: Agent: class_uri: sdo:Person attributes: surname: slot_uri: sdo:familyName home_address: slot_uri: sdo:address family_name: Wu address: 1 my street\\, Oakville surname: Wu home_address: 1 my street\\, Oakville Level 0: handled by standard linkml convert to/from RDF classes: Person: class_uri: sdo:Person attributes: family_name: slot_uri: sdo:familyName address: slot_uri: sdo:address classes: Agent: class_uri: sdo:Person attributes: surname: slot_uri: sdo:familyName home_address: slot_uri: sdo:address data2 (yaml/json) d ata1 (yaml/json) family_name: Wu address: 1 my street\\, Oakville surname: Wu home_address: 1 my street\\, Oakville d ata1.ttl == data2.ttl [sdo:familyName \u201cWu\u201d ; sdo:address \u201c1 my street\\, Oakville\u201d ] Level 0: Enums TODO: add example here. Basically this works the same way Level 0: HOWTO Compose two commands: linkml-convert -s schema1.yaml data1.yaml -o data1.ttl linkml-convert -s schema2.yaml data1.ttl -o data2.yaml That\u2019s it! TODO: Write a wrapper (linkml-map-data?) that does this in one command Level 0: other considerations Going via RDF in theory eliminates inlining differences E.g. s1 inlines address objects\\, s2 uses references (inlined: false) and includes a separate index slot for addresses Current status: Currently when going from s1 to s2\\, no index slots are generated This could be done as part of the general rdflib framework Lessons learned so far: annotate your schema with URIs! Annotating schemas with URIs is optional with LinkML But your future self and data users will thank you for careful schema annotation! Hints: Schema-automator can provide suggestions for your element and enum URIs Sometimes plain semweb URIs (e.g. schema.org) can be easier for interoperation than overly granular OBO ones E.g modeling Personhood as a role vs straightforward schema:Person Level 1 Mapping: Isomorphic, different URIs name: example-semweb-schema classes: Person: class_uri: sdo:Person attributes: family_name: slot_uri: sdo:familyName address: slot_uri: sdo:address name: example-OBO-schema classes: Person: class_uri: NCBITaxon:9606 ## Homo sapiens attributes: surname: slot_uri: IAO:0000590 ## written name home_address: slot_uri: IAO:0000422 ## postal address family_name: Wu address: 1 my street\\, Oakville surname: Wu home_address: 1 my street\\, Oakville Level 1 Mapping: mediated by URI mapping name: example-semweb-schema classes: Person: class_uri: sdo:Person attributes: family_name: slot_uri: sdo:familyName address: slot_uri: sdo:address name: example-OBO-schema classes: Person: class_uri: NCBITaxon:9606 ## Homo sapiens attributes: surname: slot_uri: IAO:0000590 ## written name home_address: slot_uri: IAO:0000422 ## postal address subject_id object_id sdo:Person NCBITaxon:9606 sdo:familyName IAO:nnnn sdo:address IAO:0000422 family_name: Wu address: 1 my street\\, Oakville surname: Wu home_address: 1 my street\\, Oakville [sdo:familyName \u201cWu\u201d sdo:address \u201c1 my street\\, Oakville\u201d ] [sdo:familyName \u201cWu\u201d sdo:address \u201c1 my street\\, Oakville\u201d ] Level 1: HOWTO Compose three commands: linkml-convert -s schema1.yaml data1.yaml -o data1.ttl sssom-map-iris -i data1.ttl -m schema1-to-schema2.sssom.tsv -o data2.ttl linkml-convert -s schema2.yaml data2.ttl -o data2.yaml That\u2019s it! TODO: sssom-map-iris does not yet exist (?)\\, but should be trivial Fold into wrapper CLI tool Nuances: Schemas have nuanced differences: not everything with be skos:exact We can distinguish 3 flavors of level 1 mapping: Precise\\, bidirectional: follow exact only Valid\\, unidirectional: follow exact + broad Loose: any mapping Level 1 variant: mappings in schema name: example-semweb-schema classes: Person: class_uri: sdo:Person exact_mappings: [\u201cNCBITaxon:9606\u201d] attributes: family_name: slot_uri: sdo:familyName exact_mappings: [\u201cIAO:nnnn\u201d] address: slot_uri: sdo:address exact_mappings: [\u201cIAO:0000422\u201d] name: example-OBO-schema classes: Person: class_uri: NCBITaxon:9606 ## Homo sapiens attributes: surname: slot_uri: IAO:0000590 ## written name home_address: slot_uri: IAO:0000422 ## postal address family_name: Wu address: 1 my street\\, Oakville surname: Wu home_address: 1 my street\\, Oakville [sdo:familyName \u201cWu\u201d sdo:address \u201c1 my street\\, Oakville\u201d ] [sdo:familyName \u201cWu\u201d sdo:address \u201c1 my street\\, Oakville\u201d ] Advantages of RDF as an intermediate Use of IRIs Separation of concerns Structural differences (e.g. inlining) are already handled by linkml convert Allows us to focus on semantic mappings Lessons learned so far: think about mappings https://linkml.io/linkml/faq/modeling.html#when-is-it-important-to-have-mappings https://github.com/alliance-genome/agr_curation_schema/blob/main/model/schema/agent.yaml More complex mappings: level 2 and above TODO: define levels 2 and above Examples of kinds of features: merging/splitting fields; e.g. full_name = first + \u201c \u201c + last Unit conversion or baked-in units to explicit units Normalization/denormalization (aka flattening) Complex logic If conditions A\\, B\\, C and not D are met then copy field F from X to Y LinkML Rule and Inference Framework Current use case is intra-schema inference Easy to invoke on command line Needs more docs! Could form basis of inter-schema DSL Examples Schemas differ in units Schemas differ in categorical vs quantitative Current use case is intra-schema inference Could form basis of inter-schema DSL Datalog Datalog could serve as the powerful basis of an expressive declarative transformation language https://linkml.io/linkml-datalog Approach for level 2+ Do we even want a generic mapping framework in LinkML here? This is a good \u201c parasitization hook\u201d Do complex stuff using an existing framework TBD: derive or semi-derive mapping specification? This is also a code bespoke procedural code hook Do the generic stuff with linkml-convert and isomorphic IRI mapping Do more complex stuff in code General approach for level 2+; same to same name: example-semweb-schema classes: Person: class_uri: sdo:Person attributes: family_name: slot_uri: sdo:familyName address: slot_uri: sdo:address name: example-OBO-schema classes: Person: class_uri: NCBITaxon:9606 ## Homo sapiens attributes: surname: slot_uri: IAO:0000590 ## written name home_address: slot_uri: IAO:0000422 ## postal address family_name: Wu address: 1 my street\\, Oakville surname: Wu home_address: 1 my street\\, Oakville JSON OR XML OR YAML OR RDF OR SQL JSON OR XML OR YAML OR RDF OR SQL (matches the one on the left) Existing mapping framework (X to X) Example of same-to-same: jsonpath-lifter name: example-semweb-schema classes: Person: class_uri: sdo:Person attributes: family_name: slot_uri: sdo:familyName address: slot_uri: sdo:address name: example-OBO-schema classes: Person: class_uri: NCBITaxon:9606 ## Homo sapiens attributes: surname: slot_uri: IAO:0000590 ## written name home_address: slot_uri: IAO:0000422 ## postal address family_name: Wu address: 1 my street\\, Oakville surname: Wu home_address: 1 my street\\, Oakville Jsonpath-lifter (JSON to JSON) Example of same-to-same: awk Example of same-to-same: SQL INSERT INTO Agent AS SELECT Person.last_name AS Agent.surname\\, CONCAT(Person.full_name\\, \u201c \u201c\\, Person.first) AS Agent.full_name\\, \u2026 CONSTRUCT { [ a schema:Person ; my:fullName STRCAT(...) ] } WHERE { ?person a schema:Person ; schema:firstName ; schema:lastName ; \u2026 } SPARQL CONSTRUCT RDF Engine or Triplestore Example of same-to-same: Python (LinkML objects) def convert(p: Person) -> Agent: return Agent(p.id\\, full_name=f\u201d{..} {..}\u201d\\, \u2026 Conversion script General approach for level 2+; heteromorphic name: example-semweb-schema classes: Person: class_uri: sdo:Person attributes: family_name: slot_uri: sdo:familyName address: slot_uri: sdo:address name: example-OBO-schema classes: Person: class_uri: NCBITaxon:9606 ## Homo sapiens attributes: surname: slot_uri: IAO:0000590 ## written name home_address: slot_uri: IAO:0000422 ## postal address family_name: Wu address: 1 my street\\, Oakville surname: Wu home_address: 1 my street\\, Oakville L inkml-convert OPTIONAL L inkml-convert OPTIONAL JSON OR XML OR YAML OR RDF OR SQL JSON OR XML OR YAML OR RDF OR SQL ( different from the one on the left) Existing mapping framework (X to Y) Example: YARRRML name: example-semweb-schema classes: Person: class_uri: sdo:Person attributes: family_name: slot_uri: sdo:familyName address: slot_uri: sdo:address name: example-OBO-schema classes: Person: class_uri: NCBITaxon:9606 ## Homo sapiens attributes: surname: slot_uri: IAO:0000590 ## written name home_address: slot_uri: IAO:0000422 ## postal address family_name: Wu address: 1 my street\\, Oakville surname: Wu home_address: 1 my street\\, Oakville YARRRML (JSON/YAML to RDF) Example: YARRRML, native mappings name: example-semweb-schema classes: Person: class_uri: sdo:Person attributes: family_name: slot_uri: sdo:familyName address: slot_uri: sdo:address name: example-OBO-schema classes: Person: class_uri: NCBITaxon:9606 ## Homo sapiens attributes: surname: slot_uri: IAO:0000590 ## written name home_address: slot_uri: IAO:0000422 ## postal address family_name: Wu address: 1 my street\\, Oakville surname: Wu home_address: 1 my street\\, Oakville mapping.yarrrml.yml Example: YARRRML, compiled mappings name: example-semweb-schema classes: Person: class_uri: sdo:Person attributes: family_name: slot_uri: sdo:familyName address: slot_uri: sdo:address Mappings : \u2026 \\< TO BE DEFINED LINKML MAPPING SPEC > name: example-OBO-schema classes: Person: class_uri: NCBITaxon:9606 ## Homo sapiens attributes: surname: slot_uri: IAO:0000590 ## written name home_address: slot_uri: IAO:0000422 ## postal address family_name: Wu address: 1 my street\\, Oakville surname: Wu home_address: 1 my street\\, Oakville mapping.yarrrml.yml Hyperparasitism is good name: example-semweb-schema classes: Person: class_uri: sdo:Person attributes: family_name: slot_uri: sdo:familyName address: slot_uri: sdo:address Mappings : \u2026 \\< TO BE DEFINED LINKML MAPPING SPEC > name: example-OBO-schema classes: Person: class_uri: NCBITaxon:9606 ## Homo sapiens attributes: surname: slot_uri: IAO:0000590 ## written name home_address: slot_uri: IAO:0000422 ## postal address mapping.yarrrml.yml family_name: Wu address: 1 my street\\, Oakville surname: Wu home_address: 1 my street\\, Oakville Alternative: Direct translation language Desiderata Ability to compile to scalable frameworks E.g. compile to SQL Simple for simple tasks Layer on existing expression language Provides path to safe subset of host language (Python) Can be easily implemented in other languages Normalized to Denormalized (modeling SSSOM) SQL INSERT (or CREATE VIEW) SQL FROM Clause (implicit INNER JOIN/WHERE) SQL SELECT \u2026 AS clause Relationship to profiles TODO Profiles/IGs can be seen as a sub-case of schema mapping Current progress https://github.com/linkml/linkml/issues/533 map to YARRRML Vincent Vemonet has started on linkml->rml https://github.com/vemonet/linkml/blob/add-gen-rml/linkml/generators/rmlgen.py Relationship to Koza Koza ingests often require multiple files See Also Revisiting BioWeave (Kent Shefchek\\, 2020?) https://docs.google.com/presentation/d/1DYiWXoz3iHM2PvMFD0hRpJ544tnHawg00PBwNuESo44/edit#slide=id.gb33d7ddd1b_0_93 Automating mapping Should we pursue approaches to automate mapping? Some of the functionality is already in schema-automator. E.g. auto-annotating schema elements using ontologies Isomorphic schema mapping discovery analogous to ontology mapping Can a boomer type approach help? E.g. given multiple loose mappings with alternative interpretations\\, which ones give coherent results Other approaches Inductive Logic Programming: transformations as logic programs Genetic programming: transformations as lambda functions Deep Learning: e.g. Language Models for translation There is already a rich literature spanning decades here to be parasitized\u2026 Summary: just tell me what to do today For isomorphic mappings: Stay within LinkML/SSSOM No need for custom code\\, it all works For complex mappings: It depends! Do the structural mapping with linkml-convert Implement the complex logic as you see fit\\, depending on multiple factors. Any of the following may be valid Koza Awk SPARQL CONSTRUCTS or SELECTS Custom python YARRRML SQL INSERTs XSLT Jsonpath-lifter \u2026. Roadmap 2022: Continue to gather use cases\\, experiment 2023: If funding permits Extend metamodel to include complex mapping Implement EITHER Parasitizing converters Direct mapping framework TBD: Is this Koza2?","title":"Overview"},{"location":"overview/#mapping-between-linkml-schemas","text":"","title":"Mapping Between LinkML Schemas"},{"location":"overview/#draft","text":"2022-06-24","title":"Draft"},{"location":"overview/#problem-map-data-from-one-schema-to-another","text":"Problem: Map d1 \u2192 d2 Assumption d1 and d2 conform to two separate schemas\\, s1\u2192 s2 Sub-problems: Ingest/Import: my data warehouse conforms to s2 (e.g. Monarch ingest) Export: make my data ingest friendly Migrations: s1 and s2 are different versions of the same schema Not in scope: in-schema syntactic or structural transforms JSON to YAML\\, JSON to TSV\\, JSON to SQL\\, JSON to RDF\\, ORM\\, \u2026 In LinkML this is already largely solved The actual problem space is highly varied S1 and S2 may be trivially isomorphic S1 and S2 may differ in complex or nuanced ways","title":"Problem: map data from one schema to another"},{"location":"overview/#there-are-many-existing-approaches","text":"Generic frameworks\\, driven by declarative specification in Domain Specific Language (DSL) JSON-based Google whistle jsonpath-lift XSLT Semweb YARRML\\, R2RML Many many more\u2026 Bespoke transforms: non-declarative Implement in python/awk/etc. Hybrid: bespoke with some declarative mappings in ad-hoc format E.g. NMDC ingest framework","title":"There are many existing approaches"},{"location":"overview/#traps-with-declarative-mapping","text":"Declarative is great\\, until it\u2019s not Anti-patterns: Insufficient expressivity to carry out real world tasks Bolting on features to mapping DSL until it\u2019s a fully-featured Turing-complete language Optimization/scalability at mercy of framework Messy layering between DSL and host language It can be useful to leverage host language features (e.g arbitrary python function) But this can get confusing: NFNF: Neither fish nor fowl Limits optimizations (forces iterative host language calls)","title":"Traps with declarative mapping"},{"location":"overview/#yarrrml","text":"https://rml.io/yarrrml/","title":"YARRRML"},{"location":"overview/#yarrrml-notes","text":"Has a playground\\, which is great Mixes two concerns: 1. Isomorphic structural mapping between JSON/TSVs and RDF (already covered by JSON-LD) 2. Mapping This isn\u2019t necessarily bad - it\u2019s quite practical\\, but a little unsatisfying IMO","title":"YARRRML notes"},{"location":"overview/#jsonpath-lifter","text":"Was proposed for CCDH CRDC-node mappings Doesn\u2019t seem widely used Is there a big advantage over simply writing javascript functions?","title":"jsonpath-lifter"},{"location":"overview/#koza-previously-bioweave","text":"","title":"Koza (previously: bioweave)"},{"location":"overview/#etl-frameworks","text":"There are many many ETL frameworks E.g. WebKarma Inherently mixing of concerns Here we are concerned with the \u201cT\u201d part Do existing frameworks separate out the T as a modular composable component? I\u2019m not sure","title":"ETL frameworks"},{"location":"overview/#do-we-need-yet-another-mapping-framework","text":"LinkML philosophy: Embrace\\, extend\\, parasitize Develop lightweight ways to map Map mappings to existing mapping frameworks This actually makes sense even if it sounds kind of meta\u2026","title":"Do we need Yet Another Mapping Framework?"},{"location":"overview/#level-0-mapping-isomorphic-same-uris","text":"classes: Person: class_uri: sdo:Person attributes: family_name: slot_uri: sdo:familyName address: slot_uri: sdo:address classes: Agent: class_uri: sdo:Person attributes: surname: slot_uri: sdo:familyName home_address: slot_uri: sdo:address family_name: Wu address: 1 my street\\, Oakville surname: Wu home_address: 1 my street\\, Oakville","title":"Level 0 Mapping: Isomorphic, same URIs"},{"location":"overview/#level-0-handled-by-standard-linkml-convert-tofrom-rdf","text":"classes: Person: class_uri: sdo:Person attributes: family_name: slot_uri: sdo:familyName address: slot_uri: sdo:address classes: Agent: class_uri: sdo:Person attributes: surname: slot_uri: sdo:familyName home_address: slot_uri: sdo:address data2 (yaml/json) d ata1 (yaml/json) family_name: Wu address: 1 my street\\, Oakville surname: Wu home_address: 1 my street\\, Oakville d ata1.ttl == data2.ttl [sdo:familyName \u201cWu\u201d ; sdo:address \u201c1 my street\\, Oakville\u201d ]","title":"Level 0: handled by standard linkml convert to/from RDF"},{"location":"overview/#level-0-enums-todo-add-example-here-basically-this-works-the-same-way","text":"","title":"Level 0: Enums TODO: add example here. Basically this works the same way"},{"location":"overview/#level-0-howto","text":"Compose two commands: linkml-convert -s schema1.yaml data1.yaml -o data1.ttl linkml-convert -s schema2.yaml data1.ttl -o data2.yaml That\u2019s it! TODO: Write a wrapper (linkml-map-data?) that does this in one command","title":"Level 0: HOWTO"},{"location":"overview/#level-0-other-considerations","text":"Going via RDF in theory eliminates inlining differences E.g. s1 inlines address objects\\, s2 uses references (inlined: false) and includes a separate index slot for addresses Current status: Currently when going from s1 to s2\\, no index slots are generated This could be done as part of the general rdflib framework","title":"Level 0: other considerations"},{"location":"overview/#lessons-learned-so-far-annotate-your-schema-with-uris","text":"Annotating schemas with URIs is optional with LinkML But your future self and data users will thank you for careful schema annotation! Hints: Schema-automator can provide suggestions for your element and enum URIs Sometimes plain semweb URIs (e.g. schema.org) can be easier for interoperation than overly granular OBO ones E.g modeling Personhood as a role vs straightforward schema:Person","title":"Lessons learned so far: annotate your schema with URIs!"},{"location":"overview/#level-1-mapping-isomorphic-different-uris","text":"name: example-semweb-schema classes: Person: class_uri: sdo:Person attributes: family_name: slot_uri: sdo:familyName address: slot_uri: sdo:address name: example-OBO-schema classes: Person: class_uri: NCBITaxon:9606 ## Homo sapiens attributes: surname: slot_uri: IAO:0000590 ## written name home_address: slot_uri: IAO:0000422 ## postal address family_name: Wu address: 1 my street\\, Oakville surname: Wu home_address: 1 my street\\, Oakville","title":"Level 1 Mapping: Isomorphic, different URIs"},{"location":"overview/#level-1-mapping-mediated-by-uri-mapping","text":"name: example-semweb-schema classes: Person: class_uri: sdo:Person attributes: family_name: slot_uri: sdo:familyName address: slot_uri: sdo:address name: example-OBO-schema classes: Person: class_uri: NCBITaxon:9606 ## Homo sapiens attributes: surname: slot_uri: IAO:0000590 ## written name home_address: slot_uri: IAO:0000422 ## postal address subject_id object_id sdo:Person NCBITaxon:9606 sdo:familyName IAO:nnnn sdo:address IAO:0000422 family_name: Wu address: 1 my street\\, Oakville surname: Wu home_address: 1 my street\\, Oakville [sdo:familyName \u201cWu\u201d sdo:address \u201c1 my street\\, Oakville\u201d ] [sdo:familyName \u201cWu\u201d sdo:address \u201c1 my street\\, Oakville\u201d ]","title":"Level 1 Mapping: mediated by URI mapping"},{"location":"overview/#level-1-howto","text":"Compose three commands: linkml-convert -s schema1.yaml data1.yaml -o data1.ttl sssom-map-iris -i data1.ttl -m schema1-to-schema2.sssom.tsv -o data2.ttl linkml-convert -s schema2.yaml data2.ttl -o data2.yaml That\u2019s it! TODO: sssom-map-iris does not yet exist (?)\\, but should be trivial Fold into wrapper CLI tool Nuances: Schemas have nuanced differences: not everything with be skos:exact We can distinguish 3 flavors of level 1 mapping: Precise\\, bidirectional: follow exact only Valid\\, unidirectional: follow exact + broad Loose: any mapping","title":"Level 1: HOWTO"},{"location":"overview/#level-1-variant-mappings-in-schema","text":"name: example-semweb-schema classes: Person: class_uri: sdo:Person exact_mappings: [\u201cNCBITaxon:9606\u201d] attributes: family_name: slot_uri: sdo:familyName exact_mappings: [\u201cIAO:nnnn\u201d] address: slot_uri: sdo:address exact_mappings: [\u201cIAO:0000422\u201d] name: example-OBO-schema classes: Person: class_uri: NCBITaxon:9606 ## Homo sapiens attributes: surname: slot_uri: IAO:0000590 ## written name home_address: slot_uri: IAO:0000422 ## postal address family_name: Wu address: 1 my street\\, Oakville surname: Wu home_address: 1 my street\\, Oakville [sdo:familyName \u201cWu\u201d sdo:address \u201c1 my street\\, Oakville\u201d ] [sdo:familyName \u201cWu\u201d sdo:address \u201c1 my street\\, Oakville\u201d ]","title":"Level 1 variant: mappings in schema"},{"location":"overview/#advantages-of-rdf-as-an-intermediate","text":"Use of IRIs Separation of concerns Structural differences (e.g. inlining) are already handled by linkml convert Allows us to focus on semantic mappings","title":"Advantages of RDF as an intermediate"},{"location":"overview/#lessons-learned-so-far-think-about-mappings","text":"https://linkml.io/linkml/faq/modeling.html#when-is-it-important-to-have-mappings https://github.com/alliance-genome/agr_curation_schema/blob/main/model/schema/agent.yaml","title":"Lessons learned so far: think about mappings"},{"location":"overview/#more-complex-mappings-level-2-and-above","text":"TODO: define levels 2 and above Examples of kinds of features: merging/splitting fields; e.g. full_name = first + \u201c \u201c + last Unit conversion or baked-in units to explicit units Normalization/denormalization (aka flattening) Complex logic If conditions A\\, B\\, C and not D are met then copy field F from X to Y","title":"More complex mappings: level 2 and above"},{"location":"overview/#linkml-rule-and-inference-framework","text":"Current use case is intra-schema inference Easy to invoke on command line Needs more docs! Could form basis of inter-schema DSL Examples Schemas differ in units Schemas differ in categorical vs quantitative Current use case is intra-schema inference Could form basis of inter-schema DSL","title":"LinkML Rule and Inference Framework"},{"location":"overview/#datalog","text":"Datalog could serve as the powerful basis of an expressive declarative transformation language https://linkml.io/linkml-datalog","title":"Datalog"},{"location":"overview/#approach-for-level-2","text":"Do we even want a generic mapping framework in LinkML here? This is a good \u201c parasitization hook\u201d Do complex stuff using an existing framework TBD: derive or semi-derive mapping specification? This is also a code bespoke procedural code hook Do the generic stuff with linkml-convert and isomorphic IRI mapping Do more complex stuff in code","title":"Approach for level 2+"},{"location":"overview/#general-approach-for-level-2-same-to-same","text":"name: example-semweb-schema classes: Person: class_uri: sdo:Person attributes: family_name: slot_uri: sdo:familyName address: slot_uri: sdo:address name: example-OBO-schema classes: Person: class_uri: NCBITaxon:9606 ## Homo sapiens attributes: surname: slot_uri: IAO:0000590 ## written name home_address: slot_uri: IAO:0000422 ## postal address family_name: Wu address: 1 my street\\, Oakville surname: Wu home_address: 1 my street\\, Oakville JSON OR XML OR YAML OR RDF OR SQL JSON OR XML OR YAML OR RDF OR SQL (matches the one on the left) Existing mapping framework (X to X)","title":"General approach for level 2+; same to same"},{"location":"overview/#example-of-same-to-same-jsonpath-lifter","text":"name: example-semweb-schema classes: Person: class_uri: sdo:Person attributes: family_name: slot_uri: sdo:familyName address: slot_uri: sdo:address name: example-OBO-schema classes: Person: class_uri: NCBITaxon:9606 ## Homo sapiens attributes: surname: slot_uri: IAO:0000590 ## written name home_address: slot_uri: IAO:0000422 ## postal address family_name: Wu address: 1 my street\\, Oakville surname: Wu home_address: 1 my street\\, Oakville Jsonpath-lifter (JSON to JSON)","title":"Example of same-to-same: jsonpath-lifter"},{"location":"overview/#example-of-same-to-same-awk","text":"","title":"Example of same-to-same: awk"},{"location":"overview/#example-of-same-to-same-sql","text":"INSERT INTO Agent AS SELECT Person.last_name AS Agent.surname\\, CONCAT(Person.full_name\\, \u201c \u201c\\, Person.first) AS Agent.full_name\\, \u2026 CONSTRUCT { [ a schema:Person ; my:fullName STRCAT(...) ] } WHERE { ?person a schema:Person ; schema:firstName ; schema:lastName ; \u2026 } SPARQL CONSTRUCT RDF Engine or Triplestore","title":"Example of same-to-same: SQL"},{"location":"overview/#example-of-same-to-same-python-linkml-objects","text":"def convert(p: Person) -> Agent: return Agent(p.id\\, full_name=f\u201d{..} {..}\u201d\\, \u2026 Conversion script","title":"Example of same-to-same: Python (LinkML objects)"},{"location":"overview/#general-approach-for-level-2-heteromorphic","text":"name: example-semweb-schema classes: Person: class_uri: sdo:Person attributes: family_name: slot_uri: sdo:familyName address: slot_uri: sdo:address name: example-OBO-schema classes: Person: class_uri: NCBITaxon:9606 ## Homo sapiens attributes: surname: slot_uri: IAO:0000590 ## written name home_address: slot_uri: IAO:0000422 ## postal address family_name: Wu address: 1 my street\\, Oakville surname: Wu home_address: 1 my street\\, Oakville L inkml-convert OPTIONAL L inkml-convert OPTIONAL JSON OR XML OR YAML OR RDF OR SQL JSON OR XML OR YAML OR RDF OR SQL ( different from the one on the left) Existing mapping framework (X to Y)","title":"General approach for level 2+; heteromorphic"},{"location":"overview/#example-yarrrml","text":"name: example-semweb-schema classes: Person: class_uri: sdo:Person attributes: family_name: slot_uri: sdo:familyName address: slot_uri: sdo:address name: example-OBO-schema classes: Person: class_uri: NCBITaxon:9606 ## Homo sapiens attributes: surname: slot_uri: IAO:0000590 ## written name home_address: slot_uri: IAO:0000422 ## postal address family_name: Wu address: 1 my street\\, Oakville surname: Wu home_address: 1 my street\\, Oakville YARRRML (JSON/YAML to RDF)","title":"Example: YARRRML"},{"location":"overview/#example-yarrrml-native-mappings","text":"name: example-semweb-schema classes: Person: class_uri: sdo:Person attributes: family_name: slot_uri: sdo:familyName address: slot_uri: sdo:address name: example-OBO-schema classes: Person: class_uri: NCBITaxon:9606 ## Homo sapiens attributes: surname: slot_uri: IAO:0000590 ## written name home_address: slot_uri: IAO:0000422 ## postal address family_name: Wu address: 1 my street\\, Oakville surname: Wu home_address: 1 my street\\, Oakville mapping.yarrrml.yml","title":"Example: YARRRML, native mappings"},{"location":"overview/#example-yarrrml-compiled-mappings","text":"name: example-semweb-schema classes: Person: class_uri: sdo:Person attributes: family_name: slot_uri: sdo:familyName address: slot_uri: sdo:address Mappings : \u2026 \\< TO BE DEFINED LINKML MAPPING SPEC > name: example-OBO-schema classes: Person: class_uri: NCBITaxon:9606 ## Homo sapiens attributes: surname: slot_uri: IAO:0000590 ## written name home_address: slot_uri: IAO:0000422 ## postal address family_name: Wu address: 1 my street\\, Oakville surname: Wu home_address: 1 my street\\, Oakville mapping.yarrrml.yml","title":"Example: YARRRML, compiled mappings"},{"location":"overview/#hyperparasitism-is-good","text":"name: example-semweb-schema classes: Person: class_uri: sdo:Person attributes: family_name: slot_uri: sdo:familyName address: slot_uri: sdo:address Mappings : \u2026 \\< TO BE DEFINED LINKML MAPPING SPEC > name: example-OBO-schema classes: Person: class_uri: NCBITaxon:9606 ## Homo sapiens attributes: surname: slot_uri: IAO:0000590 ## written name home_address: slot_uri: IAO:0000422 ## postal address mapping.yarrrml.yml family_name: Wu address: 1 my street\\, Oakville surname: Wu home_address: 1 my street\\, Oakville","title":"Hyperparasitism is good"},{"location":"overview/#alternative-direct-translation-language","text":"Desiderata Ability to compile to scalable frameworks E.g. compile to SQL Simple for simple tasks Layer on existing expression language Provides path to safe subset of host language (Python) Can be easily implemented in other languages","title":"Alternative: Direct translation language"},{"location":"overview/#normalized-to-denormalized-modeling-sssom","text":"SQL INSERT (or CREATE VIEW) SQL FROM Clause (implicit INNER JOIN/WHERE) SQL SELECT \u2026 AS clause","title":"Normalized to Denormalized (modeling SSSOM)"},{"location":"overview/#relationship-to-profiles-todo","text":"Profiles/IGs can be seen as a sub-case of schema mapping","title":"Relationship to profiles TODO"},{"location":"overview/#current-progress","text":"https://github.com/linkml/linkml/issues/533 map to YARRRML Vincent Vemonet has started on linkml->rml https://github.com/vemonet/linkml/blob/add-gen-rml/linkml/generators/rmlgen.py","title":"Current progress"},{"location":"overview/#relationship-to-koza","text":"","title":"Relationship to Koza"},{"location":"overview/#koza-ingests-often-require-multiple-files","text":"","title":"Koza ingests often require multiple files"},{"location":"overview/#see-also","text":"Revisiting BioWeave (Kent Shefchek\\, 2020?) https://docs.google.com/presentation/d/1DYiWXoz3iHM2PvMFD0hRpJ544tnHawg00PBwNuESo44/edit#slide=id.gb33d7ddd1b_0_93","title":"See Also"},{"location":"overview/#automating-mapping","text":"Should we pursue approaches to automate mapping? Some of the functionality is already in schema-automator. E.g. auto-annotating schema elements using ontologies Isomorphic schema mapping discovery analogous to ontology mapping Can a boomer type approach help? E.g. given multiple loose mappings with alternative interpretations\\, which ones give coherent results Other approaches Inductive Logic Programming: transformations as logic programs Genetic programming: transformations as lambda functions Deep Learning: e.g. Language Models for translation There is already a rich literature spanning decades here to be parasitized\u2026","title":"Automating mapping"},{"location":"overview/#summary-just-tell-me-what-to-do-today","text":"For isomorphic mappings: Stay within LinkML/SSSOM No need for custom code\\, it all works For complex mappings: It depends! Do the structural mapping with linkml-convert Implement the complex logic as you see fit\\, depending on multiple factors. Any of the following may be valid Koza Awk SPARQL CONSTRUCTS or SELECTS Custom python YARRRML SQL INSERTs XSLT Jsonpath-lifter \u2026.","title":"Summary: just tell me what to do today"},{"location":"overview/#roadmap","text":"2022: Continue to gather use cases\\, experiment 2023: If funding permits Extend metamodel to include complex mapping Implement EITHER Parasitizing converters Direct mapping framework TBD: Is this Koza2?","title":"Roadmap"},{"location":"populated_from/","text":"Slot: populated_from Name of the class in the source schema URI: https://w3id.org/linkml/transformer/populated_from Properties Range: xsd:string Identifier and Mapping Information Schema Source from schema: https://w3id.org/linkml/transformer","title":"Slot: populated_from"},{"location":"populated_from/#slot-populated_from","text":"Name of the class in the source schema URI: https://w3id.org/linkml/transformer/populated_from","title":"Slot: populated_from"},{"location":"populated_from/#properties","text":"Range: xsd:string","title":"Properties"},{"location":"populated_from/#identifier-and-mapping-information","text":"","title":"Identifier and Mapping Information"},{"location":"populated_from/#schema-source","text":"from schema: https://w3id.org/linkml/transformer","title":"Schema Source"},{"location":"prefixes/","text":"Slot: prefixes URI: https://w3id.org/linkml/transformer/prefixes Properties Range: NONE Identifier and Mapping Information Schema Source from schema: https://w3id.org/linkml/transformer","title":"Slot: prefixes"},{"location":"prefixes/#slot-prefixes","text":"URI: https://w3id.org/linkml/transformer/prefixes","title":"Slot: prefixes"},{"location":"prefixes/#properties","text":"Range: NONE","title":"Properties"},{"location":"prefixes/#identifier-and-mapping-information","text":"","title":"Identifier and Mapping Information"},{"location":"prefixes/#schema-source","text":"from schema: https://w3id.org/linkml/transformer","title":"Schema Source"},{"location":"same_as/","text":"Slot: same_as Name of the class in the source schema URI: https://w3id.org/linkml/transformer/same_as Properties Range: xsd:string Identifier and Mapping Information Schema Source from schema: https://w3id.org/linkml/transformer","title":"Slot: same_as"},{"location":"same_as/#slot-same_as","text":"Name of the class in the source schema URI: https://w3id.org/linkml/transformer/same_as","title":"Slot: same_as"},{"location":"same_as/#properties","text":"Range: xsd:string","title":"Properties"},{"location":"same_as/#identifier-and-mapping-information","text":"","title":"Identifier and Mapping Information"},{"location":"same_as/#schema-source","text":"from schema: https://w3id.org/linkml/transformer","title":"Schema Source"},{"location":"slot_derivations/","text":"Slot: slot_derivations URI: https://w3id.org/linkml/transformer/slot_derivations Properties Range: SlotDerivation Identifier and Mapping Information Schema Source from schema: https://w3id.org/linkml/transformer","title":"Slot: slot_derivations"},{"location":"slot_derivations/#slot-slot_derivations","text":"URI: https://w3id.org/linkml/transformer/slot_derivations","title":"Slot: slot_derivations"},{"location":"slot_derivations/#properties","text":"Range: SlotDerivation","title":"Properties"},{"location":"slot_derivations/#identifier-and-mapping-information","text":"","title":"Identifier and Mapping Information"},{"location":"slot_derivations/#schema-source","text":"from schema: https://w3id.org/linkml/transformer","title":"Schema Source"},{"location":"slot_name/","text":"Slot: slot_name URI: https://w3id.org/linkml/transformer/slot_name Properties Range: NONE Identifier and Mapping Information Schema Source from schema: https://w3id.org/linkml/transformer","title":"Slot: slot_name"},{"location":"slot_name/#slot-slot_name","text":"URI: https://w3id.org/linkml/transformer/slot_name","title":"Slot: slot_name"},{"location":"slot_name/#properties","text":"Range: NONE","title":"Properties"},{"location":"slot_name/#identifier-and-mapping-information","text":"","title":"Identifier and Mapping Information"},{"location":"slot_name/#schema-source","text":"from schema: https://w3id.org/linkml/transformer","title":"Schema Source"},{"location":"source_schema/","text":"Slot: source_schema URI: https://w3id.org/linkml/transformer/source_schema Properties Range: NONE Identifier and Mapping Information Schema Source from schema: https://w3id.org/linkml/transformer","title":"Slot: source_schema"},{"location":"source_schema/#slot-source_schema","text":"URI: https://w3id.org/linkml/transformer/source_schema","title":"Slot: source_schema"},{"location":"source_schema/#properties","text":"Range: NONE","title":"Properties"},{"location":"source_schema/#identifier-and-mapping-information","text":"","title":"Identifier and Mapping Information"},{"location":"source_schema/#schema-source","text":"from schema: https://w3id.org/linkml/transformer","title":"Schema Source"},{"location":"target_schema/","text":"Slot: target_schema URI: https://w3id.org/linkml/transformer/target_schema Properties Range: NONE Identifier and Mapping Information Schema Source from schema: https://w3id.org/linkml/transformer","title":"Slot: target_schema"},{"location":"target_schema/#slot-target_schema","text":"URI: https://w3id.org/linkml/transformer/target_schema","title":"Slot: target_schema"},{"location":"target_schema/#properties","text":"Range: NONE","title":"Properties"},{"location":"target_schema/#identifier-and-mapping-information","text":"","title":"Identifier and Mapping Information"},{"location":"target_schema/#schema-source","text":"from schema: https://w3id.org/linkml/transformer","title":"Schema Source"},{"location":"title/","text":"Slot: title URI: https://w3id.org/linkml/transformer/title Properties Range: NONE Identifier and Mapping Information Schema Source from schema: https://w3id.org/linkml/transformer","title":"Slot: title"},{"location":"title/#slot-title","text":"URI: https://w3id.org/linkml/transformer/title","title":"Slot: title"},{"location":"title/#properties","text":"Range: NONE","title":"Properties"},{"location":"title/#identifier-and-mapping-information","text":"","title":"Identifier and Mapping Information"},{"location":"title/#schema-source","text":"from schema: https://w3id.org/linkml/transformer","title":"Schema Source"},{"location":"transformer/","text":"transformer Datamodel for LinkML schema transformations URI: https://w3id.org/linkml/transformer","title":"transformer"},{"location":"transformer/#transformer","text":"Datamodel for LinkML schema transformations URI: https://w3id.org/linkml/transformer","title":"transformer"},{"location":"type_designator/","text":"Slot: type_designator URI: https://w3id.org/linkml/transformer/type_designator Properties Range: xsd:boolean Identifier and Mapping Information Schema Source from schema: https://w3id.org/linkml/transformer","title":"Slot: type_designator"},{"location":"type_designator/#slot-type_designator","text":"URI: https://w3id.org/linkml/transformer/type_designator","title":"Slot: type_designator"},{"location":"type_designator/#properties","text":"Range: xsd:boolean","title":"Properties"},{"location":"type_designator/#identifier-and-mapping-information","text":"","title":"Identifier and Mapping Information"},{"location":"type_designator/#schema-source","text":"from schema: https://w3id.org/linkml/transformer","title":"Schema Source"},{"location":"types/","text":"types Shared type definitions for the core LinkML mode and metamodel URI: https://w3id.org/linkml/types","title":"types"},{"location":"types/#types","text":"Shared type definitions for the core LinkML mode and metamodel URI: https://w3id.org/linkml/types","title":"types"}]}